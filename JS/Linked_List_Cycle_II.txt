/*
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

Note: Do not modify the linked list.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.

Thoughts: just check if the node exists already. Although using a hash table instead of an array now sounds like a faster option. We'll put a pin in that

*/


/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */

/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var detectCycle = function(head) {
    let list = [];
    while(!list.includes(head)){
        if(head == null){
            return null;
        }
        list.push(head)
        head = head.next
        
    }
    if(list.includes(head)){
            return list[list.indexOf(head)]
    }
};