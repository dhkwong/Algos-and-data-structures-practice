/*
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
*/

/**
 * @param {number[]} nums
 * @return {number}
 */
var maxSubArray = function(nums) {
    let prev = 0;
    let max = Number.MIN_SAFE_INTEGER;
    for(let i = 0; i <nums.length; i++){
        //compares the previous collection of values. Sees if adding nums[i] is greater or less than nums[i] alone. if it is, reassign prev to that nums[i] starting the sum over
        /*
        walkthrough:
        [-2,1,-3,4,-1,2,1,-5,4]

        p = 0, m = -âˆž

        i=0: p = -2 vs -2 so -2. m = -2
        i=1: p = -1 or 1 so we forget about prev and start over with p=1 and thus m=1
        i=2: p = -2 or -3 so we add it up and p = -2 and m stays 1
        i=3: p = 2 or 4 so we forget about prev and start over with p=4 and thus m=4
        i=4: p = 3 or -1 so we add it up and p = 3 but m stays 4
        i=5: p = 5 or 2 so we add it up and p = 5 and thus m=5
        i=6: p = 6 or 1 so we add it up and p = 6 and thus m=6
        i=7: p = 1 or -5 so we add it up and p = 1 but m stays m=6
        i=8: p = 5 or 4 so we add it up and p=5 but m stays 6
        */
        prev = Math.max(prev + nums[i], nums[i])
        //compare and see if the new optimal summation is greater than max. if yes, then assign as max
        max = Math.max(prev,max)
    }
    return max
    

};