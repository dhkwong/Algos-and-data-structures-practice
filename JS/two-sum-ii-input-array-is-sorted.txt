/*
Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.

Note:

Your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution and you may not use the same element twice.
 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.
*/
/**
 * @param {number[]} numbers
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(numbers, target) {
    let map = {}
    //fill map with number:index key:value pairs
    for(let i = 0; i < numbers.length; i++){
        map[numbers[i]] = i
    }
    //check to see if there's a matching value. 
    for(let i = 0; i < numbers.length; i++){
    for(let num in map){
        let sum = parseInt(numbers[i]) + parseInt(num)
        if(sum === target){
            //if it's the same index, move on.
            if(map[num]===i){
                continue
            }else{
                //else, return values
                let res = [i+1,map[num]+1]
                return res
            }
        }
    }
    }
    
    
};