/*
THOUGHTS: this one was weird because it's not only just the next largest, but relevant to the position at hand.
I'd consider this a medium for the O(n) time complexity. Otherwise the brute force method with a nested for loop is simply O(M*N)

You are given two arrays (without duplicates) nums1 and nums2 where nums1â€™s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.

The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.

Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
Output: [-1,3,-1]
Explanation:
    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
    For number 1 in the first array, the next greater number for it in the second array is 3.
    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.
*/
/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number[]}
 */
var nextGreaterElement = function(nums1, nums2) {

    var map = {}
    var stack = []
    for (var i = 0 ; i <nums2.length; i++){
        //while stack has values and the top of the stack value is less than the value of nums2[i]
        while(stack.length > 0 && stack[stack.length - 1] < nums2[i]){
            //set value in map of the smaller number, and the nums2[i] value we found that was larger
            map[stack.pop()] = nums2[i]
        }
        //else, push to the stack because the stack has no items or nothing larger
        stack.push(nums2[i])
    }
    //now we have a map full of keys of smaller numbers with the values as their larger numbers
    //{1:2,3:4, 6:20, ect}
    //so we use that map to compare with values in nums1
    for(var i = 0 ; i < nums1.length; i++){
        if(nums1[i] in map){
            //replace value in nums1 with the answer or what the larger number is
            nums1[i] = map[nums1[i]]
        }
        else{
            //else the number was too large or not existant in subsequent values in nums2. assign -1
            nums1[i] = -1
        }
    }
    // console.log(stack)
    return nums1
};