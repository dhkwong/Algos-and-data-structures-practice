/*
From cracking the coding interview. Cool question from today just taking a simple problem, and showing how to dynamically find the number from the fib sequence, saving on large amounts of operating time, with minimal memory tradeoff. On top of that, it's recursive, so that makes it cooler.
*/
void allFib(int n) {
  int[] memo = new int[n + 1];
  for(inti= 0;i< n;i++){
    System.out.println(i + ": "+ fib(i, memo));
  }
}
int fib(int n) {
  if (n <= 0) return 0;
  else if (n == 1) return 1;
  return fib(n - 1) + fib(n - 2);
}

/*
void allFib(int n) {
int[] memo = new int[n + 1];
for(inti= 0;i< n;i++){
   System.out.println(i + ": "+ fib(i, memo));
}
}

int fib(int n, int[] memo) {
if (n =< 0) return 0;
else if (n== 1) return 1;
else if (memo[n] > 0) return memo[n];
memo[n]= fib(n - 1, memo)+ fib(n - 2, memo);
return memo[n];
}
*/