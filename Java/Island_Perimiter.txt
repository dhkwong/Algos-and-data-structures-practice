/*
You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water.

Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).

The island doesn't have "lakes" (water inside that isn't connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.

 

Example:

Input:
[[0,1,0,0],
 [1,1,1,0],
 [0,1,0,0],
 [1,1,0,0]]

Output: 16
*/

class Solution {
    public int islandPerimeter(int[][] grid) {
        int m = grid.length;
        if(m == 0) return 0;
        int n = grid[0].length;
        //counting perimeters
        int count = 0;
        for(int i = 0 ; i<m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j]==1){
                    //check above for water 1st: you're at topmost of the grid 2nd: any other case
                    if(i == 0 || grid[i-1][j]==0) count++;
                    //check left for water 1st: you're at the leftmost side of the matrix 2nd: any other case
                    if(j == 0|| grid[i][j-1] ==0) count++;
                    //check right for water 1st: you're at the rightmost of the matrix 2nd: any other case
                    if(j+1 == grid[i].length || grid[i][j+1]==0) count++;
                    //check below for water. 1st:check if at bottom of matrix, 2nd: any other case
                    if(i+1 == grid.length || grid[i+1][j]==0) count++;
                }
                
            }
        }
        return count;
    }
}