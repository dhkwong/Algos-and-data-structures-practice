/*
Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Example 1:

Given nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.

It doesn't matter what you leave beyond the returned length.

Thoughts: Slightly poorly explained problem, but straightforward to complete. Count unique numbers, and insert them in order left to right, so you have one instance of each. The rest of the array after these numbers we don't care about and can leave as is.
*/

class Solution {
    public int removeDuplicates(int[] nums) {
        if(nums.length == 0) return 0;
        int index = 0;
        int val=nums[0];
        //count starts at 1 because the first value counts as one before you find a second num
        int count=1;
        for(int i = 1; i < nums.length; i++){
            //hit new number
            if(nums[i]!=val){
                //increment pointer for insertion
                index++;
                val = nums[i];
                //insert at new index
                nums[index] = val;
                //increment count
                count++;     
            }
        }
        return count;       
    }
}