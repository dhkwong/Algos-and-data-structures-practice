/*
definitely overcomplicated it at first, but after pivoting from checking substrings by index, and rather keeping track with two hashsets for repetion, this became a lot easier.
*/
class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        Set seen = new HashSet(), repeated = new HashSet();
        for(int i = 0; i+9 < s.length() ; i++){
            String substr = s.substring(i, i+10);
            //if exists in seen, aka exists, then add to repeated. 
            if(!seen.add(substr)){
                //if already in repeated, will not insert again
                repeated.add(substr);
            }
        }
            //create new ArrayList with values of repeated. You're converting from hashset to arraylist which is possible since both are part of Collections parent interface
            return new ArrayList(repeated);

    }
}

            //first iteration below of comparing substring, pivoted to hashset to check for repeats since it's O(1)
            //create 10 char substring
            
//             String substr = s.substring(i, i+10);
//             int lastIndex = 0;
//             int count = 0;

//             while(lastIndex != -1){

//                 lastIndex = s.indexOf(substr,lastIndex);

//                 if(lastIndex != -1){
//                     count ++;
//                     lastIndex += substr.length();
//                 }
//                 System.out.println("Count = "+count);
//             }
//             if(count>1){
//                 System.out.println("substr adding: "+substr);
//                 if(!res.contains(substr)){res.add(substr);}
//             }
//          }
        // return res;