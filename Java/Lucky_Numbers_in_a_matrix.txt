/*
Given a m * n matrix of distinct numbers, return all lucky numbers in the matrix in any order.

A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.

 

Example 1:

Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column

*/

class Solution {
    public List<Integer> luckyNumbers (int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        int[] min = new int[m], max = new int[n];
        Arrays.fill(min, Integer.MAX_VALUE);
        //assigns min for row and max for column respectively
        for(int i=0; i < m; i++){
            for(int j = 0 ; j < n; j++){
                 min[i] = Math.min(matrix[i][j], min[i]);
                max[j] = Math.max(matrix[i][j], max[j]);
            }
        }
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < m; ++i)
            for (int j = 0; j < n; ++j)
                //interates through both arrays, and if a min in a row is the same as a max in the column, then add to resulting list
                if (min[i] == max[j]) 
                    res.add(min[i]);
        return res;        
    }
}