/*
Write a function that takes an unsigned integer and return the number of '1' bits it has (also known as the Hamming weight).

 

Example 1:

Input: 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.

Doing n & 1 is the same as say, 01011 AND 00001, checking if the first bit equals 1. If it is, add 1 to count since 1 AND 1 = 1 
Then, shift bitwise one to the right, removing the first bit and checking the next. You do this 32 times since the memory allocation of int, is 32 bits, hence a for loop of 32 iterations.
*/
public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int count = 0;
        for(int i = 0; i <32; i++){
            count+= (n&1);
            n = n >>1;
        }
        return count;
    }
}