/*
Given an array of integers nums, write a method that returns the "pivot" index of this array.

We define the pivot index as the index where the sum of the numbers to the left of the index is equal to the sum of the numbers to the right of the index.

If no such index exists, we should return -1. If there are multiple pivot indexes, you should return the left-most pivot index.

Example 1:

Input: 
nums = [1, 7, 3, 6, 5, 6]
Output: 3
Explanation: 
The sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.
Also, 3 is the first index where this occurs.

*/
class Solution {
    public int pivotIndex(int[] nums) {
        //faster solution
        int total = 0, sum = 0;
        //calculate total
        for (int num : nums) total += num;
        for (int i = 0; i < nums.length; sum += nums[i++]){
            //if sum of left *2 is the total - pivot point, you know the left and right hand side of the pivot are equal. 
            if (sum * 2 == total - nums[i]) return i;
        }
        //if you reach the end, it doesn't exist. return -1
        return -1;  
        
        //too slow O(n^2)
//         for(int i = 0; i<nums.length; i++){
//             int lSum = 0;
//             int rSum = 0;
//             for(int j = 0; j<i; j++){
//                 //left side
//                 lSum+=nums[j];
//                 System.out.println("i: "+i+"lSum: "+lSum);
                
//             }
//             if(i==nums.length-1&&lSum!=0)return -1;
//             for(int k = nums.length-1; k > i; k--){
//                 //right side
//                 rSum+= nums[k];
//                 System.out.println("i: "+i+"rSum: "+rSum);
//                 if(i==nums.length-1&&lSum==0)return i;
//             }
//             if(i==nums.length-1 && rSum==0)return i;
//             if(lSum==rSum)return i;
//         }
//         return -1;
        
    }
    
}