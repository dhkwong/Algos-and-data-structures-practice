/*
Design a HashSet without using any built-in hash table libraries.

Implement MyHashSet class:

void add(key) Inserts the value key into the HashSet.
bool contains(key) Returns whether the value key exists in the HashSet or not.
void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.
 

Example 1:

Input
["MyHashSet", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"]
[[], [1], [2], [1], [3], [2], [2], [2], [2]]
Output
[null, null, null, true, false, null, true, null, false]

Explanation
MyHashSet myHashSet = new MyHashSet();
myHashSet.add(1);      // set = [1]
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(1); // return True
myHashSet.contains(3); // return False, (not found)
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(2); // return True
myHashSet.remove(2);   // set = [1]
myHashSet.contains(2); // return False, (already removed)
*/
class MyHashSet {
 //initialize the list object to null
        private LinkedList<Integer>[] HashContainer;
        //by doing so, we allow for up to 3 collisions 
        private int cap;
    /** Initialize your data structure here. */
    public MyHashSet() {
       cap = 3331;
       HashContainer = new LinkedList[cap];
    }
    
    public void add(int key) {
        if(contains(key)){
            return;
        }
        
        int hash = key%cap;
        if(HashContainer[hash] == null){
            HashContainer[hash] = new LinkedList<Integer>();
        }
        //add first so you dont spend time iterating
        HashContainer[hash].addFirst(key);
    }
    
    public void remove(int key) {
        int hash = key%cap;
        if(HashContainer[hash]!=null){
            //if not null, there's a LinkedList here
            HashContainer[hash].removeFirstOccurrence(key);
        }
        
    }
    
    /** Returns true if this set contains the specified element */
    public boolean contains(int key) {
        int hash = key % cap;
        List<Integer> bucket = HashContainer[hash];
        if(bucket!= null){
            //create iterator object
            Iterator<Integer> iterate = bucket.iterator();
            while(iterate.hasNext()){
                if(iterate.next()==key){
                    return true;
                }
            }
        
        }
        return false;
    }
}

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.add(key);
 * obj.remove(key);
 * boolean param_3 = obj.contains(key);
 */