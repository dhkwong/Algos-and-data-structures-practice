/*
Given a string, sort it in decreasing order based on the frequency of characters.
Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.

Thoughts: Using something else would probably be faster here, that my hash map solution. Because even though I'm using a map, the search time for values is still O(n). I also can't use the key as the count since I need to maintain uniqueness as I increment the count of each character in the string s.
O(N)+ O(n+n-1+n-2+n-3...n-n-1)<- which is O(n^2). Therefore the operating time is O(N)+O(N^2)
*/

class Solution {
    public String frequencySort(String s) {
        Map<Character, Integer> count = new HashMap<>();
        StringBuilder result = new StringBuilder();
        for(int i=0; i < s.length(); i++){
            if(count.containsKey(s.charAt(i))){
                count.put(s.charAt(i), count.get(s.charAt(i))+1);
            }else{
                count.put(s.charAt(i), 1);
            }
        }
        while(!count.isEmpty()){
            Character largest = greatest(count);
            for(int i = 0; i < count.get(largest); i++){
                result.append(largest);
            }
            count.remove(largest);
        }
        return result.toString();
       
        
    }
    public Character greatest(Map<Character, Integer> map){
        Map.Entry<Character, Integer> maxEntry = null;

    for (Map.Entry<Character, Integer> entry : map.entrySet()) {

        if (maxEntry == null
                || entry.getValue().compareTo(maxEntry.getValue()) > 0) {
            maxEntry = entry;
        }
    }
        return maxEntry.getKey();

    }
}