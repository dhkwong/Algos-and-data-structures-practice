/*
A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

The Linked List is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:

val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) where random pointer points to, or null if it does not point to any node.
 

Example 1:

Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]


// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if(head == null) return null;
        Map<Node, Node> map = new HashMap<>();
        Node temp = head;
        while(temp!=null){
            //you have to assign a new node as the VALUE since you're doing a deep COPY of the list
            map.put(temp,new Node(temp.val));
            temp = temp.next;
        }
        //once the map has been created with key value pairs of <Node, Node> we can recreate the list from scratch.
        temp = head;
        while(temp != null){
            map.get(temp).next=map.get(temp.next);
            map.get(temp).random=map.get(temp.random);
            temp = temp.next;
        }
        return map.get(head);
    }
}