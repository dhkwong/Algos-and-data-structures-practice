/*
core concept:
By using notPrime[i*j] to test each time, from i being the prime number we're testing and j testing while i*j<n, we knock out the multiples of that parti cular number from the get go. 2 is logged as prime, but all it's multiples aren't. 3 is logged as prime, but all it's multiples aren't. Similarly, 5 would be logged as prime, but all it's multiples won't. Pretty smart, with O(sqrt(n)).
*/
class Solution {
    public int countPrimes(int n) {
        boolean[] notPrime = new boolean[n];
        
        //starting assuming greater than 2
        int count = 0 ;
        //start from 2 as first known prime
        for(int i = 2; i < n ; i++){
            //if the array is marked as false, you can increment count
            if(notPrime[i]==false){
            count++;
            
            //mark all multiples of the prime number found as not prime up to n, since they're not, by definition as a multiple of a integer
                for(int j = 2; i*j<n ; j++){
                    notPrime[i*j] = true;
                } 
            }   
        }
        return count;
        
    }
}