/*
We are given two sentences A and B.  (A sentence is a string of space separated words.  Each word consists only of lowercase letters.)

A word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.

Return a list of all uncommon words. 

You may return the list in any order.

 

Example 1:

Input: A = "this apple is sweet", B = "this apple is sour"
Output: ["sweet","sour"]

Thoughts: this way is relatively fast, but the Memory required is O(A+3k) where A is length of string A, and k is the point of intersection with B. 3k since you store the intersections in map as well as in the array list and array res.
*/
class Solution {
    public String[] uncommonFromSentences(String A, String B) {
        Map <String, Integer> map = new HashMap<>();
        String[] a = A.split(" ");
        String[] b = B.split(" ");
        List<String> result = new ArrayList<>();
        for(String word : a){
            map.put(word, map.getOrDefault(word, 0)+1);
        }
        for(String word : b){
            map.put(word, map.getOrDefault(word, 0)+1);
        }
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            String key = entry.getKey();
            if(map.get(key)==1){
                result.add(key);
            }
        }
        String[] res = new String[result.size()];
        for(int i = 0; i < result.size(); i++){
            res[i] = result.get(i);
        }
        return res;
    }
}